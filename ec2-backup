#!/bin/bash

## GLOBALS/FLAGS ##
f_ssh=''
f_aws=''
f_zone=''

method='dd'
verbose='false'
volumeid=''
directory=''
initial_volume_size=2.5

usage() {
	cat <<EOF
-h Print a usage statement and exit.
-m method Use the given method to perform the backup. Valid method are 'dd' and 'rsync'; default is 'dd'.
-v volume-id  Use the given volume instead of creating a new one.
EOF
}

while getopts h:m:v: flag; do
  case "${flag}" in
    h) usage ;; 
    m) method=$OPTARG ;;
    v) volumeid=$OPTARG;;
    *) $0 [-hmv] 
	   usage
	   exit 1
	   ;;
  esac
done
shift $(($OPTIND-1))
directory=$1
if [ ! -e "$directory" ] 
	then 
		echo " $directory : No such file or directory"
		exit 1
fi
dir_size=$(stat -c%s "$directory")
size=$((($dir_size + $dir_size) / 1024 / 1024 / 1014)) # in GB

echo $size

if [ ! -z "$EC2_BACKUP_VERBOSE" ]
	then 
		verbose=$EC2_BACKUP_FLAGS_VERBOSE
fi

if [ -z "$EC2_BACKUP_FLAGS_SSH" ] 
	then 
		echo environment variable should be set: '$EC2_BACKUP_FLAGS_SSH' 
		exit 1
	else
		sshpath=`expr "$EC2_BACKUP_FLAGS_SSH" : "^-i \(.*\)$"`
		echo $sshpath
		if [ ! -e "$sshpath" ]
			then 
				echo '$EC2_BACKUP_FLAGS_SSH does not exist (Check the path)' exit 1
		else
			f_ssh=$EC2_BACKUP_FLAGS_SSH
		fi	
fi	

if [ -z "$EC2_BACKUP_FLAGS_AWS" ] 
	then 
		echo environment variable should be set: '$EC2_BACKUP_FLAGS_AWS' 
		exit 1
	else
		f_aws=$EC2_BACKUP_FLAGS_AWS
		if [ "`expr "$EC2_BACKUP_FLAGS_AWS" : "^.*\(\(-z\|--availability-zone\) [^ ]*\) \?.*$"`" != ""  ]
			then
				flags_zone=`expr "$EC2_BACKUP_FLAGS_AWS" : "^.*\(\(-z\|--availability-zone\) [^ ]*\) \?.*$"` 2>/dev/null
		fi
fi

if [ $verbose = "true" ]
then
	echo 'EC2_BACKUP_FLAGS_SSH  = '$f_ssh
	echo 'EC2_BACKUP_FLAGS_ZONE = '$f_zone
	echo 'EC2_BACKUP_FLAGS_AWS  = '$f_aws
fi

if [ ! $method -eq "dd" || ! $method -eq "rsync" ] 
	then 
		echo "method must be dd or rsync"
		exit 1
fi 


#ATTACH
#SSH 
#MOUNT

#UNMOUNT
#UNMOUNT EWS


#if volumeid is not empty
#	run describe-volumes and store output
#	check that "State" is "available" if not exit with error volume is in use, can't mount it
#	read stored describe-volumes output and see in "Size" is large enough (value stored in GB)
#	if not exit error volume too small for files to be transferred to
#	ssh to instance
#	check free space on volume if space is too small exit with error volume is in use, can't mount it
#	logout of instance

#if volumeid is empty
#	create a volume of initial_volume_size * src_size


#transfer files with tar to instance
#ssh to instance
#copy files using correct mode


